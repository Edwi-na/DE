# -*- coding: utf-8 -*-
"""functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GsxfQ47JE4uzaovdysWbI-PGKCBohzZd
"""

from pyspark.sql.functions import when
from pyspark.sql.functions import col, expr
from azure.storage.blob import BlobServiceClient


def save_df_to_delta(df, table_name, save_path):
    """
    Saves a DataFrame as a Delta table with the specified table name and save path.
    """
    df.write.format("delta").mode("overwrite").save(save_path)

def upload_files(storage_account_name, storage_account_access_key, container_name):
    """
    Uploads Delta files from the dbfs:/bronze folder to the Azure Blob Storage bronze container.
    """
    import os


    # Create a BlobServiceClient object to connect to the storage account
    blob_service_client = BlobServiceClient(account_url=f"https://{storage_account_name}.blob.core.windows.net",credential=storage_account_access_key)

    # Get a reference to the bronze container
    container_client = blob_service_client.get_container_client(container_name)

    # List all Delta files in the dbfs:/bronze folder
    files = [file.path for file in dbutils.fs.ls(f"dbfs:/{container_name}")]

    # Upload each Delta file to the bronze container
    for file_path in files:
        # Extract the file name from the path
        file_name = file_path.split("/")[2]

        # Create a BlobClient for the Delta file in the bronze container
        blob_client = container_client.get_blob_client(file_name)

        # Upload the Delta file to the bronze container
        blob_client.upload_blob(f"dbfs:/{container_name}/{file_name}", overwrite=True)

        print(f"{file_name} has been successfully uploaded to the {container_name} container.")

def process_movie_quarantine_data(df):
  df = df.withColumn("RunTime", expr("abs(cast(RunTime as int))"))


def process_movie_data(df1, df2):
  df1 = df1.union(df2)
  zero_budget_rows = df1.filter(df1["budget"] == 0)
  num_zero_budget_rows = zero_budget_rows.count()
  print("Number of rows with budget is 0:", num_zero_budget_rows)
  df1 = df1.withColumn("budget", when(df1["budget"] == 0, 1000000).otherwise(df1["budget"]))